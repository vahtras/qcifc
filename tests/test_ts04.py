import pytest

import numpy as np
import numpy.testing as npt

from . import TestQC, get_codes_settings, get_codes_ids

CASE = 'ts04'

codes_settings = get_codes_settings(CASE)
ids = get_codes_ids()


@pytest.mark.parametrize('code', codes_settings, indirect=True, ids=ids)
class TestTS04(TestQC):

    def test_get_orbhess(self, code):
        self.skip_if_not_implemented('get_orbital_diagonal', code)
        """Get diagonal orbital hessian"""
        od = code.get_orbital_diagonal()
        npt.assert_allclose(
            od,
            [
              41.12301075, 22.52722995,  3.04605585,  2.29279757,  1.70880648,
               1.55366827,  1.55234103,  1.44972015,  1.38482977, 83.73486435,
              84.05792325, 84.19631355, 84.20533865, 84.55611265, 46.54330275,
              46.86636164, 47.00475195, 47.01377704, 47.36455104,  7.58095455,
               7.90401345,  8.04240375,  8.05142885,  8.40220285,  6.07443798,
               6.39749688,  6.53588719,  6.54491228,  6.89568628,  4.90645581,
               5.22951471,  5.36790501,  5.37693011,  5.72770411,  4.59617939,
               4.91923828,  5.05762859,  5.06665368,  5.41742768,  4.59352491,
               4.91658380,  5.05497411,  5.06399920,  5.41477320,  4.38828315,
               4.71134205,  4.84973235,  4.85875745,  5.20953145,  4.25850238,
               4.58156127,  4.71995158,  4.72897667,  5.07975067,  2.14378453,
               2.30531397,  2.37450913,  2.37902167,  2.55440867
            ]*2
        )

    def test_get_s2_diagonal(self, code):
        """Get diagonal overlap hessian"""
        self.skip_if_not_implemented('get_overlap_diagonal', code)
        sd = code.get_overlap_diagonal()
        expected = [1.]*9 + [2.]*45 + [1.]*5
        expected += [-1.]*9 + [-2.]*45 + [-1.]*5
        npt.assert_allclose(sd, expected)

    def test_get_rhs(self, code):
        """Get property gradient right-hand side"""
        self.skip_if_not_implemented('get_rhs', code)
        rhs,  = code.get_rhs('z',)
        z = np.array([
            -4.74839076e-02, -3.09070578e-02, -3.71710662e-01,
            -5.22563355e-02, -4.35958661e-01, -1.06252400e-01,
             4.66947447e-03,  1.16796007e+00,  3.44126872e-03,
            -2.77704928e-02, -1.86908782e-02,  6.24601352e-03,
            -2.19432115e-04,  5.30014510e-02, -2.76090809e-02,
             9.88423469e-02, -4.58366418e-02,  6.79633170e-02,
            -7.49578433e-02,  1.16214723e-01,  1.04801939e-02,
            -1.23562082e-02,  1.12713805e-02, -6.94236297e-02,
             2.13820911e-02,  3.24285576e-02, -5.26460897e-02,
             1.08785663e-01,  1.99116306e-02,  4.66627100e-01,
             1.51874583e-01,  3.95706441e-02, -7.86341354e-02,
            -3.03518915e-01,  2.67911924e-03, -3.05030953e-01,
             2.83976511e-01, -5.01642132e-01, -1.23498065e-01,
            -2.75053048e-02,  5.98874429e-01, -5.02736350e-01,
             8.96004299e-01,  2.06142755e-01,  6.90249992e-01,
            -4.75034463e-01, -6.09807553e-02,  2.38633327e-01,
             9.77629107e-01,  3.96936787e-02,  5.07149869e-02,
            -4.74235148e-02,  1.33814893e-01,  3.09150557e-02,
             1.83556855e-01, -3.70350927e-01,  2.77744115e-02,
             6.92593665e-02,  8.41942732e-01
        ])
        expected = list(z) + list(-z)
        npt.assert_allclose(rhs, expected, atol=1e-6)

    @pytest.mark.parametrize(
        'args',
        [
            (
                'z', (0.0,),
                {
                    ('z', 0.0):
                    [
                -1.15467974e-03, -1.37198661e-03, -1.22030153e-01,
                -2.27915173e-02, -2.55124653e-01, -6.83880864e-02,
                 3.00802103e-03,  8.05645193e-01,  2.48497599e-03,
                -3.31647910e-04, -2.22357126e-04,  7.41839310e-05,
                -2.60591690e-06,  6.26819864e-04, -5.93191272e-04,
                 2.10902539e-03, -9.75149105e-04,  1.44560427e-03,
                -1.58257265e-03,  1.53298271e-02,  1.32593320e-03,
                -1.53638248e-03,  1.39992300e-03, -8.26255102e-03,
                 3.52001142e-03,  5.06894465e-03, -8.05492631e-03,
                 1.66214089e-02,  2.88754879e-03,  9.51047188e-02,
                 2.90418119e-02,  7.37171094e-03, -1.46243551e-02,
                -5.29913748e-02,  5.82901365e-04, -6.20077612e-02,
                 5.61481544e-02, -9.90085693e-02, -2.27964400e-02,
                -5.98784275e-03,  1.21807021e-01, -9.94537933e-02,
                 1.76936106e-01,  3.80704321e-02,  1.57293859e-01,
                -1.00827844e-01, -1.25740455e-02,  4.91140647e-02,
                 1.87661619e-01,  9.32104181e-03,  1.10693678e-02,
                -1.00474579e-02,  2.82967969e-02,  6.08593960e-03,
                 8.56228098e-02, -1.60650971e-01,  1.16969066e-02,
                 2.91125412e-02,  3.29603771e-01,  1.15467974e-03,
                 1.37198661e-03,  1.22030153e-01,  2.27915173e-02,
                 2.55124653e-01,  6.83880864e-02, -3.00802103e-03,
                -8.05645193e-01, -2.48497599e-03,  3.31647910e-04,
                 2.22357126e-04, -7.41839310e-05,  2.60591690e-06,
                -6.26819864e-04,  5.93191272e-04, -2.10902539e-03,
                 9.75149105e-04, -1.44560427e-03,  1.58257265e-03,
                -1.53298271e-02, -1.32593320e-03,  1.53638248e-03,
                -1.39992300e-03,  8.26255102e-03, -3.52001142e-03,
                -5.06894465e-03,  8.05492631e-03, -1.66214089e-02,
                -2.88754879e-03, -9.51047188e-02, -2.90418119e-02,
                -7.37171094e-03,  1.46243551e-02,  5.29913748e-02,
                -5.82901365e-04,  6.20077612e-02, -5.61481544e-02,
                 9.90085693e-02,  2.27964400e-02,  5.98784275e-03,
                -1.21807021e-01,  9.94537933e-02, -1.76936106e-01,
                -3.80704321e-02, -1.57293859e-01,  1.00827844e-01,
                 1.25740455e-02, -4.91140647e-02, -1.87661619e-01,
                -9.32104181e-03, -1.10693678e-02,  1.00474579e-02,
                -2.82967969e-02, -6.08593960e-03, -8.56228098e-02,
                 1.60650971e-01, -1.16969066e-02, -2.91125412e-02,
                -3.29603771e-01
                    ]
                }
            ),
            (
                'z', (0.5,),
                {
                    ('z', 0.5):
                    [
        -1.16889188e-03, -1.40312958e-03, -1.45994700e-01,
        -2.91479286e-02, -3.60652153e-01, -1.00840467e-01,
         4.43722552e-03,  1.22979392e+00,  3.88918734e-03,
        -3.35656473e-04, -2.25034259e-04,  7.50756043e-05,
        -2.63723600e-06,  6.34321647e-04, -6.06216047e-04,
         2.15500736e-03, -9.96345809e-04,  1.47702104e-03,
        -1.61670590e-03,  1.76592501e-02,  1.51798572e-03,
        -1.75454414e-03,  1.59845341e-03, -9.37877969e-03,
         4.21368655e-03,  6.00807343e-03, -9.50996433e-03,
         1.96190053e-02,  3.37732193e-03,  1.19450244e-01,
         3.59082762e-02,  9.05941040e-03, -1.79655908e-02,
        -6.42000658e-02,  7.44990433e-04, -7.78291420e-02,
         6.99858315e-02, -1.23355017e-01, -2.79570089e-02,
        -7.65412945e-03,  1.52907345e-01, -1.23980163e-01,
         2.20473542e-01,  4.66938495e-02,  2.03716738e-01,
        -1.27995333e-01, -1.58402584e-02,  6.18420128e-02,
         2.32241787e-01,  1.21815712e-02,  1.41600221e-02,
        -1.27484226e-02,  3.58851514e-02,  7.57768262e-03,
         1.11667224e-01, -2.05144885e-01,  1.48168985e-02,
         3.68592696e-02,  4.09822419e-01,  1.14080906e-03,
         1.34219608e-03,  1.04823691e-01,  1.87111075e-02,
         1.97372954e-01,  5.17378592e-02, -2.27519423e-03,
        -5.99039852e-01, -1.82577163e-03,  3.27733961e-04,
         2.19742941e-04, -7.33131900e-05,  2.57533293e-06,
        -6.19493445e-04,  5.80714409e-04, -2.06496469e-03,
         9.54835510e-04, -1.41549616e-03,  1.54985091e-03,
        -1.35433327e-02, -1.17701909e-03,  1.36647384e-03,
        -1.24525980e-03,  7.38376217e-03, -3.02244378e-03,
        -4.38372035e-03,  6.98605066e-03, -1.44184133e-02,
        -2.52183659e-03, -7.90028936e-02, -2.43798417e-02,
        -6.21407575e-03,  1.23310330e-02,  4.51147836e-02,
        -4.78740772e-04,  5.15321293e-02, -4.68791552e-02,
         8.26884406e-02,  1.92441693e-02,  4.91734734e-03,
        -1.01219631e-01,  8.30286540e-02, -1.47757984e-01,
        -3.21356264e-02, -1.28102027e-01,  8.31738773e-02,
         1.04245377e-02, -4.07310474e-02, -1.57440077e-01,
        -7.54847594e-03, -9.08616503e-03,  8.29089446e-03,
        -2.33575559e-02, -5.08492164e-03, -6.94295821e-02,
         1.32017639e-01, -9.66231459e-03, -2.40565631e-02,
        -2.75648357e-01
                    ],
                }
            ),
        ],
        ids=['0.0', '0.5']
    )
    def test_initial_guess(self, code, args):
        """form paired trialvectors from rhs/orbdiag"""
        self.skip_if_not_implemented('initial_guess', code)
        self.skip_if_not_implemented('get_orbital_diagonal', code)
        self.skip_if_not_implemented('get_overlap_diagonal', code)
        ops, freqs, expected = args
        initial_guess = code.initial_guess(ops, freqs)
        for op, freq in zip(ops, freqs):
            npt.assert_allclose(
                initial_guess[(op, freq)],
                expected[(op, freq)],
                rtol=1e-5,
            )

    @pytest.mark.parametrize(
        'args',
        [
            ('x', 'x', (0,), {('x', 'x', 0): -7.919300117806e+00}),
            ('y', 'y', (0,), {('y', 'y', 0): -9.417538523718e+00}),
            ('z', 'z', (0,), {('z', 'z', 0): -1.741701816106e+01}),
            ('x', 'x', (0.5,), {('x', 'x', 0.5): -9.067142511985e+00}),
            ('y', 'y', (0.5,), {('y', 'y', 0.5): -1.013645310651e+01}),
            ('z', 'z', (0.5,), {('z', 'z', 0.5): -3.232573463730e+00}),
        ],
        ids=['xx0', 'yy0', 'zz0', 'xx0.5', 'yy0.5', 'zz0.5']
    )
    def test_lr(self, code, args):
        self.skip_if_not_implemented('lr', code)
        aops, bops, freqs, expected = args
        lr = code.lr(aops, bops, freqs)
        for k, v in lr.items():
            npt.assert_allclose(v, expected[k], rtol=1e-4)
